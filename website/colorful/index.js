function toggle (item, index) {	item.addEventListener('click', function () {		if (item.getAttribute('class') === 'toggle') {			item.setAttribute('class', 'toggle-off')			item.parentNode.querySelector('.detail-wrapper').style.display = 'none'		} else {			item.setAttribute('class', 'toggle')			item.parentNode.querySelector('.detail-wrapper').style.display = 'flex'		}	})			}document.querySelectorAll('.toggle-off').forEach(toggle)document.querySelectorAll('.toggle').forEach(toggle)// render single swatchfunction createLine(arr) {	let [a, b, c, d, e] = arr.swatches.map(item => item.hex)	return `<div class="rect-container" data-colors="#${a}, #${b}, #${c}, #${d}, #${e}">				<div class="rect-shade">					√				</div>				<div class="rect-line">					<div style="background-color:#${a}">A</div>					<div style="background-color:#${b}">B</div>					<div style="background-color:#${c}">C</div>					<div style="background-color:#${d}">D</div>					<div style="background-color:#${e}">E</div>				</div>				<div class="info-line">					<span>${arr.name}</span>					<span>★ ${arr.like.count}</span>				</div>			</div>`		}// render multi swatch by circulationfunction renderLine(node, themes) {	let html = ''	if (Array.isArray(themes)) {		themes.forEach(item => {			html += createLine(item)		})	}	node.innerHTML = html}renderLine(document.querySelector('.theme-container'), themes)// sidebar bind click event function~function () {	let focusedNode = null 	document.querySelector('.theme-container').addEventListener('click', function (event) {		let colorArray = []		if (event.target.parentNode.dataset.colors) {			colorArray = event.target.parentNode.dataset.colors.split(',')		}		if (focusedNode) { 			focusedNode.classList.remove('rect-container-selected') 		}		event.target.parentNode.classList.add('rect-container-selected')		focusedNode = event.target.parentNode		createDynamicStyle(colorArray)	})}()// create dynamic style element to change themefunction createDynamicStyle(colorArray) {	if (!Array.isArray(colorArray)) return	if (document.head.querySelectorAll('style').length >= 1) {		document.head.removeChild(document.head.lastElementChild)	}	let str = `		*[apple], *[a] {			background-color: ${colorArray[0]};		}		*[banana], *[b] {			background-color: ${colorArray[1]};		}		*[cake], *[c] {			background-color: ${colorArray[2]};		}		*[dog], *[d] {			background-color: ${colorArray[3]};		}		*[egg], *[e] {			background-color: ${colorArray[4]};		}	`	let styleNode = document.createElement('style')	let styleText = document.createTextNode(str)	styleNode.appendChild(styleText)	document.head.appendChild(styleNode)}